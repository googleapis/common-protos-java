buildscript {
  repositories {
    mavenLocal()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
    mavenCentral()
    jcenter()
  }
  dependencies {
    classpath "net.ltgt.gradle:gradle-apt-plugin:0.10",
            "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0",
            "gradle.plugin.com.dorongold.plugins:task-tree:1.3.1"
  }
}

apply plugin: 'java'
apply plugin: 'io.codearte.nexus-staging'

project.version = "1.15.0" // {x-version-update:common-protos-java:current}

if (project.hasProperty('ossrhUsername') && project.hasProperty('ossrhPassword')) {
  // Nexus staging plugin only works at root project level
  // See https://github.com/Codearte/gradle-nexus-staging-plugin/issues/47
  nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
    packageGroup = "com.google.api"
  }
}

subprojects {
  apply plugin: 'java'
  apply plugin: 'maven'
  apply plugin: 'idea'
  apply plugin: 'signing'
  apply plugin: 'maven-publish'
  apply plugin: 'com.dorongold.task-tree'

  group = "com.google.api"

  sourceCompatibility = 1.7
  targetCompatibility = 1.7

  repositories {
    mavenLocal()
    mavenCentral()
  }

  // JavaDoc
  // -------

  javadoc.options {
    encoding = 'UTF-8'
    links 'https://docs.oracle.com/javase/7/docs/api/'

    if (JavaVersion.current().isJava8Compatible()) {
      addStringOption('Xdoclint:all,-missing', '-quiet')
    }
  }

  // Publishing
  // ----------

  afterEvaluate {
    if (!(project.name ==~ "^grpc-.+" || project.name ==~ "^proto-.+")) {
      return
    }

    publishing {
      publications {
        mavenJava(MavenPublication) {
          version = project.version

          from components.java

          artifact javadocJar
          artifact sourcesJar

          pom {
            packaging = 'jar'
            artifactId = project.name
            description = 'Google Common Protos for Java'

          }
        }
      }
      repositories {
        maven {
          url 'https://oss.sonatype.org/service/local/staging/deploy/maven2/'
          credentials {
            username = project.hasProperty('ossrhUsername') ? project.getProperty('ossrhUsername') : null
            password = project.hasProperty('ossrhPassword') ? project.getProperty('ossrhPassword') : null
          }
        }
      }
    }
  }
}

// JavaDoc
// -------

task allDocs(type: Javadoc) {
  def subProjects = subprojects.findAll {
    it.name.startsWith("proto-") || it.name.startsWith("grpc-")
  }
}

javadoc.options {
  encoding = 'UTF-8'
  links 'https://docs.oracle.com/javase/7/docs/api/'
}

clean {
  delete 'tmp_gh-pages/'
  delete 'tmp_docs/'
}

// Release
// =======

task checkOutGhPages {
  doLast {
    exec {
      commandLine 'git', 'clone', '--branch', 'gh-pages',
              '--single-branch', 'git@github.com:andreamlin/common-protos-java.git', 'tmp_gh-pages'
    }
  }
}

task copyFilesToGhPages {
  dependsOn 'checkOutGhPages'
  dependsOn 'allDocs'
  doLast {
    def newSiteDirPath = 'tmp_gh-pages/' + project.version + '/apidocs/'
    new File(newSiteDirPath).mkdirs()
    copy {
      from 'tmp_docs'
      into newSiteDirPath
    }
    copy {
      from 'README.md'
      into 'tmp_gh-pages'
      rename { filename -> filename.replace 'README', 'index' }
    }
    delete('tmp_gh-pages/latest/')
    def latestDirPath = 'tmp_gh-pages/latest/apidocs/'
    new File(latestDirPath).mkdirs()
    copy {
      from 'tmp_docs'
      into latestDirPath
    }
  }
}

task createApiDocsRedirect {
  dependsOn 'copyFilesToGhPages'
  doLast {
    def template = new File('templates/apidocs_index.html.template').text
    def outputContent = template.replace('{{siteVersion}}', project.version)
    new File('tmp_gh-pages/apidocs/index.html').write(outputContent)
  }
}

task publishDocs {
  dependsOn 'closeAndReleaseRepository'
  doLast {
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'add', '.'
    }
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'commit', '-m', 'Release docs for ' + project.version
    }
    exec {
      workingDir './tmp_gh-pages'
      commandLine 'git', 'push'
    }
  }
}

// 1. Updates samples/pom.xml
// 2. Updates README.md
// 3. Regenerates the gh-pages branch under tmp_gh-pages
// 4. Stages the artifact on Sonatype
task stageRelease {
  dependsOn 'createApiDocsRedirect'
  doLast {
    exec {
      // We need to spawn a new gradle build process in order to upload appropriately
      // More details: http://stackoverflow.com/questions/31614735/gradle-uploadarchives-artificats-namespace-when-depending-on-a-plugin
      commandLine './gradlew', 'publish'
    }
  }
}

// 1. Closes and releases the artifact on Sonatype
// 2. Commits and pushes the new docs
// 3. Remove tmp_gh-pages
// Note: This task assumes that the 'stage_release' task has been completed.
task finalizeRelease {
  dependsOn 'publishDocs'
  doLast {
    exec {
      commandLine 'rm', '-r', 'tmp_gh-pages'
    }
  }
}
